{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>torah-dl</code> - tools for downloading media from Torah websites.","text":""},{"location":"#why-torah-dl","title":"Why <code>torah-dl</code>?","text":"<p>Most of our generation's Torah content is locked up in websites that are not easily accessible. Sofer.Ai is building a platform to make Torah accessible to everyone, and we decided to build key parts of that platform in the open. We intend to support every website with Torah audio on our platform, and realized quickly that even finding all the sites with audio would be a full-time job. So we open-sourced <code>torah-dl</code> to make it easier for others to download Torah audio from any website, and make Torah more accessible!</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p><code>torah-dl</code> is a library and a set of command-line tools for downloading media from Torah websites. You can use it as a command-line tool with <code>uvx</code> (preferred), <code>pipx</code>, <code>pip</code>, <code>poetry</code>, <code>venv</code>, or any Python tool installer of your choice, simply by running <code>uvx torah-dl</code>.</p> <p>For those who want to integrate <code>torah-dl</code> into their Python application, you can simply install it via <code>uv add torah-dl</code> or <code>pip install torah-dl</code>. You can then use the library in your code as you would any other Python library:</p> <pre><code>from torah_dl import extract\n\nextraction = extract(\"https://www.yutorah.org/lectures/details?shiurid=1117416\")\n\nprint(extraction.download_url)\n</code></pre>"},{"location":"#what-sites-does-it-support","title":"What sites does it support?","text":"<p>Here is the list of sites that <code>torah-dl</code> supports already, and what's coming soon:</p> <ul> <li> Yutorah</li> <li> TorahAnytime</li> <li> OUTorah.org</li> <li> TorahDownloads.org</li> <li> Help us out by adding your favorite Torah website!</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We'd love your help! Please see our CONTRIBUTING.md for more information on how to get involved.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to <code>torah-dl</code>","text":""},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to contribute","text":"<ol> <li>Fork the repository</li> <li>Create a new branch for your changes</li> <li>Make your changes and commit them</li> <li>Open a pull request</li> </ol>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant code of conduct. Additionally, we expect everyone contributing to behave Al Kiddush Hashem and not engage in any behavior that could be considered inappropriate or offensive.</p>"},{"location":"CONTRIBUTING/#how-to-run-the-project","title":"How to run the project","text":"<p>We use <code>uv</code> to manage our python versions and dependencies. If you haven't installed <code>uv</code>, please do so by following the instructions here.</p> <p>Once you have <code>uv</code> installed, you can install the project's dependencies by running <code>uv sync</code>.</p> <p>To run the project, use <code>uv run pytest -vv -s --cov=torah_dl</code> to run the tests, or <code>task test</code> if you have task installed.</p> <p>This is foundational software, and we maintain a very high standard for code quality. Please make sure your code passes <code>ruff check --fix</code> before submitting a pull request. While code coverage is a poor metric for judging the quality of this project, we strive to maintain the existing 90%+ coverage. Additionally, our tests actually download and extract the metadata from the target sites, which means we are constantly ensuring that our tooling works as intended. Please help us maintain that level of service with your tests.</p>"},{"location":"MANUAL/","title":"<code>torah-dl</code>","text":"<p>TODO: add description</p> <p>Usage:</p> <pre><code>$ torah-dl [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--version</code></li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>extract</code>: Extract information from a given URL</li> <li><code>download</code>: Download a file from a URL and show progress.</li> </ul>"},{"location":"MANUAL/#torah-dl-extract","title":"<code>torah-dl extract</code>","text":"<p>Extract information from a given URL</p> <p>Usage:</p> <pre><code>$ torah-dl extract [OPTIONS] URL\n</code></pre> <p>Arguments:</p> <ul> <li><code>URL</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>--url-only</code>: Only output the download URL</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"MANUAL/#torah-dl-download","title":"<code>torah-dl download</code>","text":"<p>Download a file from a URL and show progress.</p> <p>Usage:</p> <pre><code>$ torah-dl download [OPTIONS] URL [OUTPUT_PATH]\n</code></pre> <p>Arguments:</p> <ul> <li><code>URL</code>: URL to download  [required]</li> <li><code>[OUTPUT_PATH]</code>: Path to save the downloaded file  [default: audio]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>torah_dl<ul> <li>cli</li> <li>core<ul> <li>download</li> <li>exceptions</li> <li>extract</li> <li>extractors<ul> <li>yutorah</li> </ul> </li> <li>models</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/torah_dl/","title":"torah_dl","text":""},{"location":"reference/torah_dl/#torah_dl.ContentExtractionError","title":"ContentExtractionError","text":"<p>               Bases: <code>ExtractionError</code></p> <p>Raised when required content cannot be extracted from the page.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class ContentExtractionError(ExtractionError):\n    \"\"\"Raised when required content cannot be extracted from the page.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.DownloadError","title":"DownloadError","text":"<p>               Bases: <code>TorahDLError</code></p> <p>Raised when there are issues during the download process.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class DownloadError(TorahDLError):\n    \"\"\"Raised when there are issues during the download process.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.DownloadURLError","title":"DownloadURLError","text":"<p>               Bases: <code>ContentExtractionError</code></p> <p>Raised when the download URL cannot be found or extracted.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class DownloadURLError(ContentExtractionError):\n    \"\"\"Raised when the download URL cannot be found or extracted.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.ExtractionError","title":"ExtractionError","text":"<p>               Bases: <code>TorahDLError</code></p> <p>Base class for all extraction-related errors.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class ExtractionError(TorahDLError):\n    \"\"\"Base class for all extraction-related errors.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.ExtractorNotFoundError","title":"ExtractorNotFoundError","text":"<p>               Bases: <code>ExtractionError</code></p> <p>Raised when no extractor is found for a given URL.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class ExtractorNotFoundError(ExtractionError):\n    \"\"\"Raised when no extractor is found for a given URL.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.NetworkError","title":"NetworkError","text":"<p>               Bases: <code>ExtractionError</code></p> <p>Raised when there are network-related issues during content extraction.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class NetworkError(ExtractionError):\n    \"\"\"Raised when there are network-related issues during content extraction.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.TitleExtractionError","title":"TitleExtractionError","text":"<p>               Bases: <code>ContentExtractionError</code></p> <p>Raised when the title cannot be found or decoded.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class TitleExtractionError(ContentExtractionError):\n    \"\"\"Raised when the title cannot be found or decoded.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.TorahDLError","title":"TorahDLError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for all torah-dl errors.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class TorahDLError(Exception):\n    \"\"\"Base exception class for all torah-dl errors.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/#torah_dl.download","title":"download","text":"<pre><code>download(url: str, output_path: Path, timeout: int = 30)\n</code></pre> <p>Download a file from a given URL and save it to the specified output path.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to download from</p> required <code>output_path</code> <code>Path</code> <p>The path to save the downloaded file to</p> required <code>timeout</code> <code>int</code> <p>The timeout for the request</p> <code>30</code> Source code in <code>src/torah_dl/core/download.py</code> <pre><code>def download(url: str, output_path: Path, timeout: int = 30):\n    \"\"\"Download a file from a given URL and save it to the specified output path.\n\n    Args:\n        url: The URL to download from\n        output_path: The path to save the downloaded file to\n        timeout: The timeout for the request\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=timeout)\n        response.raise_for_status()\n\n    except requests.RequestException as e:\n        raise DownloadError(url) from e\n\n    with open(output_path, \"wb\") as f:\n        f.write(response.content)\n</code></pre>"},{"location":"reference/torah_dl/cli/","title":"cli","text":""},{"location":"reference/torah_dl/cli/#torah_dl.cli.callback","title":"callback","text":"<pre><code>callback(version: Annotated[bool | None, typer.Option(--version, callback=version_callback, is_eager=True)] = None)\n</code></pre> <p>TODO: add description</p> Source code in <code>src/torah_dl/cli.py</code> <pre><code>@app.callback(invoke_without_command=True)\ndef callback(\n    version: Annotated[\n        bool | None,\n        typer.Option(\"--version\", callback=version_callback, is_eager=True),\n    ] = None,\n):\n    \"\"\"\n    TODO: add description\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/torah_dl/cli/#torah_dl.cli.download_url","title":"download_url","text":"<pre><code>download_url(url: Annotated[str, typer.Argument(help='URL to download')], output_path: Annotated[Path, typer.Argument(help='Path to save the downloaded file')] = Path('audio'))\n</code></pre> <p>Download a file from a URL and show progress.</p> Source code in <code>src/torah_dl/cli.py</code> <pre><code>@app.command(name=\"download\")\ndef download_url(\n    url: Annotated[str, typer.Argument(help=\"URL to download\")],\n    output_path: Annotated[Path, typer.Argument(help=\"Path to save the downloaded file\")] = Path(\"audio\"),\n):\n    \"\"\"Download a file from a URL and show progress.\"\"\"\n    with console.status(\"Extracting URL...\"):\n        extraction = extract(url)\n    with console.status(\"Downloading file...\"):\n        download(extraction.download_url, output_path)\n</code></pre>"},{"location":"reference/torah_dl/cli/#torah_dl.cli.extract_url","title":"extract_url","text":"<pre><code>extract_url(url: str, url_only: Annotated[bool, typer.Option(--url - only, help='Only output the download URL')] = False)\n</code></pre> <p>Extract information from a given URL</p> Source code in <code>src/torah_dl/cli.py</code> <pre><code>@app.command(name=\"extract\")\ndef extract_url(\n    url: str,\n    url_only: Annotated[bool, typer.Option(\"--url-only\", help=\"Only output the download URL\")] = False,\n):\n    \"\"\"\n    Extract information from a given URL\n    \"\"\"\n    try:\n        extraction = extract(url)\n    except ExtractorNotFoundError:\n        typer.echo(f\"Extractor not found for URL: {url}\", err=True)\n        raise typer.Exit(1) from None\n\n    table = Table(box=None, pad_edge=False)\n    table.add_column(\"Title\", style=\"cyan\")\n    table.add_column(\"Download URL\", style=\"green\")\n    table.add_row(extraction.title, extraction.download_url)\n    if url_only:\n        typer.echo(extraction.download_url)\n    else:\n        console.print(table)\n</code></pre>"},{"location":"reference/torah_dl/cli/#torah_dl.cli.version_callback","title":"version_callback","text":"<pre><code>version_callback(value: bool)\n</code></pre> <p>print version information to shell</p> Source code in <code>src/torah_dl/cli.py</code> <pre><code>def version_callback(value: bool):\n    \"\"\"\n    print version information to shell\n    \"\"\"\n    if value:\n        typer.echo(f\"torah-dl version: {__version__}\")\n        raise typer.Exit()\n</code></pre>"},{"location":"reference/torah_dl/core/","title":"core","text":""},{"location":"reference/torah_dl/core/download/","title":"download","text":""},{"location":"reference/torah_dl/core/download/#torah_dl.core.download.download","title":"download","text":"<pre><code>download(url: str, output_path: Path, timeout: int = 30)\n</code></pre> <p>Download a file from a given URL and save it to the specified output path.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to download from</p> required <code>output_path</code> <code>Path</code> <p>The path to save the downloaded file to</p> required <code>timeout</code> <code>int</code> <p>The timeout for the request</p> <code>30</code> Source code in <code>src/torah_dl/core/download.py</code> <pre><code>def download(url: str, output_path: Path, timeout: int = 30):\n    \"\"\"Download a file from a given URL and save it to the specified output path.\n\n    Args:\n        url: The URL to download from\n        output_path: The path to save the downloaded file to\n        timeout: The timeout for the request\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=timeout)\n        response.raise_for_status()\n\n    except requests.RequestException as e:\n        raise DownloadError(url) from e\n\n    with open(output_path, \"wb\") as f:\n        f.write(response.content)\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/","title":"exceptions","text":""},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.ContentExtractionError","title":"ContentExtractionError","text":"<p>               Bases: <code>ExtractionError</code></p> <p>Raised when required content cannot be extracted from the page.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class ContentExtractionError(ExtractionError):\n    \"\"\"Raised when required content cannot be extracted from the page.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.DownloadError","title":"DownloadError","text":"<p>               Bases: <code>TorahDLError</code></p> <p>Raised when there are issues during the download process.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class DownloadError(TorahDLError):\n    \"\"\"Raised when there are issues during the download process.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.DownloadURLError","title":"DownloadURLError","text":"<p>               Bases: <code>ContentExtractionError</code></p> <p>Raised when the download URL cannot be found or extracted.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class DownloadURLError(ContentExtractionError):\n    \"\"\"Raised when the download URL cannot be found or extracted.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.ExtractionError","title":"ExtractionError","text":"<p>               Bases: <code>TorahDLError</code></p> <p>Base class for all extraction-related errors.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class ExtractionError(TorahDLError):\n    \"\"\"Base class for all extraction-related errors.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.ExtractorNotFoundError","title":"ExtractorNotFoundError","text":"<p>               Bases: <code>ExtractionError</code></p> <p>Raised when no extractor is found for a given URL.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class ExtractorNotFoundError(ExtractionError):\n    \"\"\"Raised when no extractor is found for a given URL.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.NetworkError","title":"NetworkError","text":"<p>               Bases: <code>ExtractionError</code></p> <p>Raised when there are network-related issues during content extraction.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class NetworkError(ExtractionError):\n    \"\"\"Raised when there are network-related issues during content extraction.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.TitleExtractionError","title":"TitleExtractionError","text":"<p>               Bases: <code>ContentExtractionError</code></p> <p>Raised when the title cannot be found or decoded.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class TitleExtractionError(ContentExtractionError):\n    \"\"\"Raised when the title cannot be found or decoded.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/exceptions/#torah_dl.core.exceptions.TorahDLError","title":"TorahDLError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for all torah-dl errors.</p> Source code in <code>src/torah_dl/core/exceptions.py</code> <pre><code>class TorahDLError(Exception):\n    \"\"\"Base exception class for all torah-dl errors.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/extract/","title":"extract","text":""},{"location":"reference/torah_dl/core/models/","title":"models","text":""},{"location":"reference/torah_dl/core/models/#torah_dl.core.models.Extraction","title":"Extraction","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the extracted data from a source.</p> Source code in <code>src/torah_dl/core/models.py</code> <pre><code>class Extraction(BaseModel):\n    \"\"\"Represents the extracted data from a source.\"\"\"\n\n    title: str | None = None\n    download_url: str\n    file_format: str | None = None\n    file_name: str | None = None\n</code></pre>"},{"location":"reference/torah_dl/core/models/#torah_dl.core.models.Extractor","title":"Extractor","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for all extractors.</p> Source code in <code>src/torah_dl/core/models.py</code> <pre><code>class Extractor(ABC):\n    \"\"\"Abstract base class for all extractors.\"\"\"\n\n    @property\n    @abstractmethod\n    def url_patterns(self) -&gt; Pattern | list[Pattern]:\n        \"\"\"\n        Returns the regex pattern(s) that match URLs this extractor can handle.\n        Can return either a single compiled regex pattern or a list of patterns.\n        \"\"\"\n        pass\n\n    def can_handle(self, url: str) -&gt; bool:\n        \"\"\"\n        Checks if this extractor can handle the given URL.\n\n        Args:\n            url: The URL to check\n\n        Returns:\n            bool: True if this extractor can handle the URL, False otherwise\n        \"\"\"\n        patterns = self.url_patterns\n        if isinstance(patterns, Pattern):\n            patterns = [patterns]\n\n        return any(pattern.match(url) for pattern in patterns)\n\n    @abstractmethod\n    def extract(self, url: str) -&gt; Extraction:\n        \"\"\"\n        Extracts data from the given URL.\n\n        Args:\n            url: The URL to extract from\n\n        Returns:\n            Extraction: The extracted data\n\n        Raises:\n            ValueError: If the URL is not supported by this extractor\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/torah_dl/core/models/#torah_dl.core.models.Extractor.url_patterns","title":"url_patterns  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>url_patterns: Pattern | list[Pattern]\n</code></pre> <p>Returns the regex pattern(s) that match URLs this extractor can handle. Can return either a single compiled regex pattern or a list of patterns.</p>"},{"location":"reference/torah_dl/core/models/#torah_dl.core.models.Extractor.can_handle","title":"can_handle","text":"<pre><code>can_handle(url: str) -&gt; bool\n</code></pre> <p>Checks if this extractor can handle the given URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to check</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if this extractor can handle the URL, False otherwise</p> Source code in <code>src/torah_dl/core/models.py</code> <pre><code>def can_handle(self, url: str) -&gt; bool:\n    \"\"\"\n    Checks if this extractor can handle the given URL.\n\n    Args:\n        url: The URL to check\n\n    Returns:\n        bool: True if this extractor can handle the URL, False otherwise\n    \"\"\"\n    patterns = self.url_patterns\n    if isinstance(patterns, Pattern):\n        patterns = [patterns]\n\n    return any(pattern.match(url) for pattern in patterns)\n</code></pre>"},{"location":"reference/torah_dl/core/models/#torah_dl.core.models.Extractor.extract","title":"extract  <code>abstractmethod</code>","text":"<pre><code>extract(url: str) -&gt; Extraction\n</code></pre> <p>Extracts data from the given URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to extract from</p> required <p>Returns:</p> Name Type Description <code>Extraction</code> <code>Extraction</code> <p>The extracted data</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the URL is not supported by this extractor</p> Source code in <code>src/torah_dl/core/models.py</code> <pre><code>@abstractmethod\ndef extract(self, url: str) -&gt; Extraction:\n    \"\"\"\n    Extracts data from the given URL.\n\n    Args:\n        url: The URL to extract from\n\n    Returns:\n        Extraction: The extracted data\n\n    Raises:\n        ValueError: If the URL is not supported by this extractor\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/torah_dl/core/extractors/","title":"extractors","text":""},{"location":"reference/torah_dl/core/extractors/#torah_dl.core.extractors.YutorahExtractor","title":"YutorahExtractor","text":"<p>               Bases: <code>Extractor</code></p> <p>Extract audio content from YUTorah.org.</p> <p>This extractor handles URLs from www.yutorah.org and extracts MP3 download links along with their associated titles from the page's JavaScript content.</p> Source code in <code>src/torah_dl/core/extractors/yutorah.py</code> <pre><code>class YutorahExtractor(Extractor):\n    \"\"\"Extract audio content from YUTorah.org.\n\n    This extractor handles URLs from www.yutorah.org and extracts MP3 download\n    links along with their associated titles from the page's JavaScript content.\n    \"\"\"\n\n    # URL pattern for YUTorah.org pages\n    URL_PATTERN = re.compile(r\"https?://(?:www\\.)?yutorah\\.org/\")\n\n    # Pattern to find download URL in script tags\n    DOWNLOAD_URL_PATTERN = re.compile(r'\"downloadURL\":\"(https?://[^\\\"]+\\.mp3)\"')\n\n    @property\n    def url_patterns(self) -&gt; list[Pattern]:\n        \"\"\"Return the URL pattern(s) that this extractor can handle.\n\n        Returns:\n            List[Pattern]: List of compiled regex patterns matching YUTorah.org URLs\n        \"\"\"\n        return [self.URL_PATTERN]\n\n    def extract(self, url: str) -&gt; Extraction:\n        \"\"\"Extract download URL and title from a YUTorah.org page.\n\n        Args:\n            url: The YUTorah.org URL to extract from\n\n        Returns:\n            Extraction: Object containing the download URL and title\n\n        Raises:\n            ValueError: If the URL is invalid or content cannot be extracted\n            requests.RequestException: If there are network-related issues\n        \"\"\"\n        try:\n            response = requests.get(url, timeout=30, headers={\"User-Agent\": \"torah-dl/1.0\"})\n            response.raise_for_status()\n        except requests.RequestException as e:\n            raise NetworkError(str(e)) from e\n\n        # Parse the page content\n        soup = BeautifulSoup(response.content, \"html.parser\")\n        script_tag = soup.find(\"script\", string=self.DOWNLOAD_URL_PATTERN)\n\n        if not script_tag:\n            raise DownloadURLError()\n\n        # Extract download URL\n        match = self.DOWNLOAD_URL_PATTERN.search(str(script_tag))\n        if not match:\n            raise DownloadURLError()\n\n        download_url = match.group(1)\n\n        file_name = download_url.split(\"/\")[-1]\n\n        # Extract and decode title\n        try:\n            title_tag = soup.find(\"h2\", itemprop=\"name\")\n            title = title_tag.text if title_tag else None\n\n        except (UnicodeError, IndexError) as e:\n            raise TitleExtractionError(str(e)) from e\n\n        if not download_url or not title:\n            raise ContentExtractionError()\n\n        return Extraction(download_url=download_url, title=title, file_format=\"mp3\", file_name=file_name)\n</code></pre>"},{"location":"reference/torah_dl/core/extractors/#torah_dl.core.extractors.YutorahExtractor.url_patterns","title":"url_patterns  <code>property</code>","text":"<pre><code>url_patterns: list[Pattern]\n</code></pre> <p>Return the URL pattern(s) that this extractor can handle.</p> <p>Returns:</p> Type Description <code>list[Pattern]</code> <p>List[Pattern]: List of compiled regex patterns matching YUTorah.org URLs</p>"},{"location":"reference/torah_dl/core/extractors/#torah_dl.core.extractors.YutorahExtractor.extract","title":"extract","text":"<pre><code>extract(url: str) -&gt; Extraction\n</code></pre> <p>Extract download URL and title from a YUTorah.org page.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The YUTorah.org URL to extract from</p> required <p>Returns:</p> Name Type Description <code>Extraction</code> <code>Extraction</code> <p>Object containing the download URL and title</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the URL is invalid or content cannot be extracted</p> <code>RequestException</code> <p>If there are network-related issues</p> Source code in <code>src/torah_dl/core/extractors/yutorah.py</code> <pre><code>def extract(self, url: str) -&gt; Extraction:\n    \"\"\"Extract download URL and title from a YUTorah.org page.\n\n    Args:\n        url: The YUTorah.org URL to extract from\n\n    Returns:\n        Extraction: Object containing the download URL and title\n\n    Raises:\n        ValueError: If the URL is invalid or content cannot be extracted\n        requests.RequestException: If there are network-related issues\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=30, headers={\"User-Agent\": \"torah-dl/1.0\"})\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise NetworkError(str(e)) from e\n\n    # Parse the page content\n    soup = BeautifulSoup(response.content, \"html.parser\")\n    script_tag = soup.find(\"script\", string=self.DOWNLOAD_URL_PATTERN)\n\n    if not script_tag:\n        raise DownloadURLError()\n\n    # Extract download URL\n    match = self.DOWNLOAD_URL_PATTERN.search(str(script_tag))\n    if not match:\n        raise DownloadURLError()\n\n    download_url = match.group(1)\n\n    file_name = download_url.split(\"/\")[-1]\n\n    # Extract and decode title\n    try:\n        title_tag = soup.find(\"h2\", itemprop=\"name\")\n        title = title_tag.text if title_tag else None\n\n    except (UnicodeError, IndexError) as e:\n        raise TitleExtractionError(str(e)) from e\n\n    if not download_url or not title:\n        raise ContentExtractionError()\n\n    return Extraction(download_url=download_url, title=title, file_format=\"mp3\", file_name=file_name)\n</code></pre>"},{"location":"reference/torah_dl/core/extractors/yutorah/","title":"yutorah","text":""},{"location":"reference/torah_dl/core/extractors/yutorah/#torah_dl.core.extractors.yutorah.YutorahExtractor","title":"YutorahExtractor","text":"<p>               Bases: <code>Extractor</code></p> <p>Extract audio content from YUTorah.org.</p> <p>This extractor handles URLs from www.yutorah.org and extracts MP3 download links along with their associated titles from the page's JavaScript content.</p> Source code in <code>src/torah_dl/core/extractors/yutorah.py</code> <pre><code>class YutorahExtractor(Extractor):\n    \"\"\"Extract audio content from YUTorah.org.\n\n    This extractor handles URLs from www.yutorah.org and extracts MP3 download\n    links along with their associated titles from the page's JavaScript content.\n    \"\"\"\n\n    # URL pattern for YUTorah.org pages\n    URL_PATTERN = re.compile(r\"https?://(?:www\\.)?yutorah\\.org/\")\n\n    # Pattern to find download URL in script tags\n    DOWNLOAD_URL_PATTERN = re.compile(r'\"downloadURL\":\"(https?://[^\\\"]+\\.mp3)\"')\n\n    @property\n    def url_patterns(self) -&gt; list[Pattern]:\n        \"\"\"Return the URL pattern(s) that this extractor can handle.\n\n        Returns:\n            List[Pattern]: List of compiled regex patterns matching YUTorah.org URLs\n        \"\"\"\n        return [self.URL_PATTERN]\n\n    def extract(self, url: str) -&gt; Extraction:\n        \"\"\"Extract download URL and title from a YUTorah.org page.\n\n        Args:\n            url: The YUTorah.org URL to extract from\n\n        Returns:\n            Extraction: Object containing the download URL and title\n\n        Raises:\n            ValueError: If the URL is invalid or content cannot be extracted\n            requests.RequestException: If there are network-related issues\n        \"\"\"\n        try:\n            response = requests.get(url, timeout=30, headers={\"User-Agent\": \"torah-dl/1.0\"})\n            response.raise_for_status()\n        except requests.RequestException as e:\n            raise NetworkError(str(e)) from e\n\n        # Parse the page content\n        soup = BeautifulSoup(response.content, \"html.parser\")\n        script_tag = soup.find(\"script\", string=self.DOWNLOAD_URL_PATTERN)\n\n        if not script_tag:\n            raise DownloadURLError()\n\n        # Extract download URL\n        match = self.DOWNLOAD_URL_PATTERN.search(str(script_tag))\n        if not match:\n            raise DownloadURLError()\n\n        download_url = match.group(1)\n\n        file_name = download_url.split(\"/\")[-1]\n\n        # Extract and decode title\n        try:\n            title_tag = soup.find(\"h2\", itemprop=\"name\")\n            title = title_tag.text if title_tag else None\n\n        except (UnicodeError, IndexError) as e:\n            raise TitleExtractionError(str(e)) from e\n\n        if not download_url or not title:\n            raise ContentExtractionError()\n\n        return Extraction(download_url=download_url, title=title, file_format=\"mp3\", file_name=file_name)\n</code></pre>"},{"location":"reference/torah_dl/core/extractors/yutorah/#torah_dl.core.extractors.yutorah.YutorahExtractor.url_patterns","title":"url_patterns  <code>property</code>","text":"<pre><code>url_patterns: list[Pattern]\n</code></pre> <p>Return the URL pattern(s) that this extractor can handle.</p> <p>Returns:</p> Type Description <code>list[Pattern]</code> <p>List[Pattern]: List of compiled regex patterns matching YUTorah.org URLs</p>"},{"location":"reference/torah_dl/core/extractors/yutorah/#torah_dl.core.extractors.yutorah.YutorahExtractor.extract","title":"extract","text":"<pre><code>extract(url: str) -&gt; Extraction\n</code></pre> <p>Extract download URL and title from a YUTorah.org page.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The YUTorah.org URL to extract from</p> required <p>Returns:</p> Name Type Description <code>Extraction</code> <code>Extraction</code> <p>Object containing the download URL and title</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the URL is invalid or content cannot be extracted</p> <code>RequestException</code> <p>If there are network-related issues</p> Source code in <code>src/torah_dl/core/extractors/yutorah.py</code> <pre><code>def extract(self, url: str) -&gt; Extraction:\n    \"\"\"Extract download URL and title from a YUTorah.org page.\n\n    Args:\n        url: The YUTorah.org URL to extract from\n\n    Returns:\n        Extraction: Object containing the download URL and title\n\n    Raises:\n        ValueError: If the URL is invalid or content cannot be extracted\n        requests.RequestException: If there are network-related issues\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=30, headers={\"User-Agent\": \"torah-dl/1.0\"})\n        response.raise_for_status()\n    except requests.RequestException as e:\n        raise NetworkError(str(e)) from e\n\n    # Parse the page content\n    soup = BeautifulSoup(response.content, \"html.parser\")\n    script_tag = soup.find(\"script\", string=self.DOWNLOAD_URL_PATTERN)\n\n    if not script_tag:\n        raise DownloadURLError()\n\n    # Extract download URL\n    match = self.DOWNLOAD_URL_PATTERN.search(str(script_tag))\n    if not match:\n        raise DownloadURLError()\n\n    download_url = match.group(1)\n\n    file_name = download_url.split(\"/\")[-1]\n\n    # Extract and decode title\n    try:\n        title_tag = soup.find(\"h2\", itemprop=\"name\")\n        title = title_tag.text if title_tag else None\n\n    except (UnicodeError, IndexError) as e:\n        raise TitleExtractionError(str(e)) from e\n\n    if not download_url or not title:\n        raise ContentExtractionError()\n\n    return Extraction(download_url=download_url, title=title, file_format=\"mp3\", file_name=file_name)\n</code></pre>"}]}